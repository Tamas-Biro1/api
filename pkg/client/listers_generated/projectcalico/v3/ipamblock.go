// Copyright (c) 2021 Tigera, Inc. All rights reserved.

// Code generated by lister-gen. DO NOT EDIT.

package v3

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	v3 "github.com/projectcalico/api/pkg/apis/projectcalico/v3"
)

// IPAMBlockLister helps list IPAMBlocks.
// All objects returned here must be treated as read-only.
type IPAMBlockLister interface {
	// List lists all IPAMBlocks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v3.IPAMBlock, err error)
	// IPAMBlocks returns an object that can list and get IPAMBlocks.
	IPAMBlocks(namespace string) IPAMBlockNamespaceLister
	IPAMBlockListerExpansion
}

// iPAMBlockLister implements the IPAMBlockLister interface.
type iPAMBlockLister struct {
	indexer cache.Indexer
}

// NewIPAMBlockLister returns a new IPAMBlockLister.
func NewIPAMBlockLister(indexer cache.Indexer) IPAMBlockLister {
	return &iPAMBlockLister{indexer: indexer}
}

// List lists all IPAMBlocks in the indexer.
func (s *iPAMBlockLister) List(selector labels.Selector) (ret []*v3.IPAMBlock, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.IPAMBlock))
	})
	return ret, err
}

// IPAMBlocks returns an object that can list and get IPAMBlocks.
func (s *iPAMBlockLister) IPAMBlocks(namespace string) IPAMBlockNamespaceLister {
	return iPAMBlockNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IPAMBlockNamespaceLister helps list and get IPAMBlocks.
// All objects returned here must be treated as read-only.
type IPAMBlockNamespaceLister interface {
	// List lists all IPAMBlocks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v3.IPAMBlock, err error)
	// Get retrieves the IPAMBlock from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v3.IPAMBlock, error)
	IPAMBlockNamespaceListerExpansion
}

// iPAMBlockNamespaceLister implements the IPAMBlockNamespaceLister
// interface.
type iPAMBlockNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IPAMBlocks in the indexer for a given namespace.
func (s iPAMBlockNamespaceLister) List(selector labels.Selector) (ret []*v3.IPAMBlock, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.IPAMBlock))
	})
	return ret, err
}

// Get retrieves the IPAMBlock from the indexer for a given namespace and name.
func (s iPAMBlockNamespaceLister) Get(name string) (*v3.IPAMBlock, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v3.Resource("ipamblock"), name)
	}
	return obj.(*v3.IPAMBlock), nil
}
